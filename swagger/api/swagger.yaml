---
swagger: "2.0"
info:
  description: "Api Documentation"
  version: "1.0"
  title: "Api Documentation"
  termsOfService: "urn:tos"
  contact: {}
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
host: "localhost:8082"
basePath: "/"
tags:
- name: "basic-error-controller"
  description: "Basic Error Controller"
- name: "hairdresser-controller"
  description: "Hairdresser Controller"
- name: "service-controller"
  description: "Service Controller"
- name: "service-info-controller"
  description: "Service Info Controller"
- name: "user-controller"
  description: "User Controller"
- name: "visit-controller"
  description: "Visit Controller"
paths:
  /error:
    get:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingGET"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
    head:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingHEAD"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    post:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "201":
          description: "Created"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
    put:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "201":
          description: "Created"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
    delete:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingDELETE"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    options:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingOPTIONS"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    patch:
      tags:
      - "basic-error-controller"
      summary: "errorHtml"
      operationId: "errorHtmlUsingPATCH"
      consumes:
      - "application/json"
      produces:
      - "text/html"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ModelAndView"
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
  /hairdresser/get-all:
    get:
      tags:
      - "hairdresser-controller"
      summary: "getAll"
      operationId: "getAllUsingGET"
      produces:
      - "*/*"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HairdresserDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
  /login:
    post:
      tags:
      - "user-controller"
      summary: "login"
      operationId: "loginUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "userDto"
        description: "userDto"
        required: true
        schema:
          $ref: "#/definitions/UserDto"
        x-exportParamName: "UserDto"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserDto"
        "201":
          description: "Created"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
  /register:
    post:
      tags:
      - "user-controller"
      summary: "register"
      operationId: "registerUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "userDto"
        description: "userDto"
        required: true
        schema:
          $ref: "#/definitions/UserDto"
        x-exportParamName: "UserDto"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserDto"
        "201":
          description: "Created"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
  /service-info/get-all:
    get:
      tags:
      - "service-info-controller"
      summary: "getAll"
      operationId: "getAllUsingGET_2"
      produces:
      - "*/*"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceInfoDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
  /service/get-all:
    get:
      tags:
      - "service-controller"
      summary: "getAll"
      operationId: "getAllUsingGET_1"
      produces:
      - "*/*"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ServiceDto"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
  /visit:
    post:
      tags:
      - "visit-controller"
      summary: "create"
      operationId: "createUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "visitDto"
        description: "visitDto"
        required: true
        schema:
          $ref: "#/definitions/VisitDtoReq"
        x-exportParamName: "VisitDto"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VisitDtoRes"
        "201":
          description: "Created"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
  /visit/get-all/{userId}:
    get:
      tags:
      - "visit-controller"
      summary: "getByUserId"
      operationId: "getByUserIdUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "userId"
        in: "path"
        description: "userId"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "UserId"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VisitDtoRes"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"
definitions:
  HairdresserDto:
    type: "object"
    properties:
      description:
        type: "string"
      fullName:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      phone:
        type: "string"
    title: "HairdresserDto"
  ModelAndView:
    type: "object"
    properties:
      empty:
        type: "boolean"
      model:
        type: "object"
        properties: {}
      modelMap:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
      reference:
        type: "boolean"
      status:
        type: "string"
        enum:
        - "ACCEPTED"
        - "ALREADY_REPORTED"
        - "BAD_GATEWAY"
        - "BAD_REQUEST"
        - "BANDWIDTH_LIMIT_EXCEEDED"
        - "CHECKPOINT"
        - "CONFLICT"
        - "CONTINUE"
        - "CREATED"
        - "DESTINATION_LOCKED"
        - "EXPECTATION_FAILED"
        - "FAILED_DEPENDENCY"
        - "FORBIDDEN"
        - "FOUND"
        - "GATEWAY_TIMEOUT"
        - "GONE"
        - "HTTP_VERSION_NOT_SUPPORTED"
        - "IM_USED"
        - "INSUFFICIENT_SPACE_ON_RESOURCE"
        - "INSUFFICIENT_STORAGE"
        - "INTERNAL_SERVER_ERROR"
        - "I_AM_A_TEAPOT"
        - "LENGTH_REQUIRED"
        - "LOCKED"
        - "LOOP_DETECTED"
        - "METHOD_FAILURE"
        - "METHOD_NOT_ALLOWED"
        - "MOVED_PERMANENTLY"
        - "MOVED_TEMPORARILY"
        - "MULTIPLE_CHOICES"
        - "MULTI_STATUS"
        - "NETWORK_AUTHENTICATION_REQUIRED"
        - "NON_AUTHORITATIVE_INFORMATION"
        - "NOT_ACCEPTABLE"
        - "NOT_EXTENDED"
        - "NOT_FOUND"
        - "NOT_IMPLEMENTED"
        - "NOT_MODIFIED"
        - "NO_CONTENT"
        - "OK"
        - "PARTIAL_CONTENT"
        - "PAYLOAD_TOO_LARGE"
        - "PAYMENT_REQUIRED"
        - "PERMANENT_REDIRECT"
        - "PRECONDITION_FAILED"
        - "PRECONDITION_REQUIRED"
        - "PROCESSING"
        - "PROXY_AUTHENTICATION_REQUIRED"
        - "REQUESTED_RANGE_NOT_SATISFIABLE"
        - "REQUEST_ENTITY_TOO_LARGE"
        - "REQUEST_HEADER_FIELDS_TOO_LARGE"
        - "REQUEST_TIMEOUT"
        - "REQUEST_URI_TOO_LONG"
        - "RESET_CONTENT"
        - "SEE_OTHER"
        - "SERVICE_UNAVAILABLE"
        - "SWITCHING_PROTOCOLS"
        - "TEMPORARY_REDIRECT"
        - "TOO_EARLY"
        - "TOO_MANY_REQUESTS"
        - "UNAUTHORIZED"
        - "UNAVAILABLE_FOR_LEGAL_REASONS"
        - "UNPROCESSABLE_ENTITY"
        - "UNSUPPORTED_MEDIA_TYPE"
        - "UPGRADE_REQUIRED"
        - "URI_TOO_LONG"
        - "USE_PROXY"
        - "VARIANT_ALSO_NEGOTIATES"
      view:
        $ref: "#/definitions/View"
      viewName:
        type: "string"
    title: "ModelAndView"
  RoleDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    title: "RoleDto"
    example:
      name: "name"
      id: 6
  ServiceDto:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    title: "ServiceDto"
  ServiceInfoDto:
    type: "object"
    properties:
      hairdresserDto:
        $ref: "#/definitions/HairdresserDto"
      id:
        type: "integer"
        format: "int64"
      price:
        type: "integer"
        format: "int64"
      serviceDto:
        $ref: "#/definitions/ServiceDto"
    title: "ServiceInfoDto"
  TimestampReq:
    type: "object"
    properties:
      date:
        type: "integer"
        format: "int32"
      hours:
        type: "integer"
        format: "int32"
      minutes:
        type: "integer"
        format: "int32"
      month:
        type: "integer"
        format: "int32"
      nanos:
        type: "integer"
        format: "int32"
      seconds:
        type: "integer"
        format: "int32"
      time:
        type: "integer"
        format: "int64"
      year:
        type: "integer"
        format: "int32"
    title: "TimestampReq"
    example:
      date: 0
      hours: 6
      seconds: 2
      month: 5
      nanos: 5
      year: 9
      minutes: 1
      time: 7
  TimestampRes:
    type: "object"
    properties:
      date:
        type: "integer"
        format: "int32"
      day:
        type: "integer"
        format: "int32"
      hours:
        type: "integer"
        format: "int32"
      minutes:
        type: "integer"
        format: "int32"
      month:
        type: "integer"
        format: "int32"
      nanos:
        type: "integer"
        format: "int32"
      seconds:
        type: "integer"
        format: "int32"
      time:
        type: "integer"
        format: "int64"
      timezoneOffset:
        type: "integer"
        format: "int32"
      year:
        type: "integer"
        format: "int32"
    title: "TimestampRes"
  UserDto:
    type: "object"
    properties:
      fullName:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      password:
        type: "string"
      roleDto:
        $ref: "#/definitions/RoleDto"
      username:
        type: "string"
    title: "UserDto"
    example:
      password: "password"
      roleDto:
        name: "name"
        id: 6
      fullName: "fullName"
      id: 0
      username: "username"
  View:
    type: "object"
    properties:
      contentType:
        type: "string"
    title: "View"
  VisitDtoReq:
    type: "object"
    properties:
      comment:
        type: "string"
      date:
        $ref: "#/definitions/TimestampReq"
      id:
        type: "integer"
        format: "int64"
      serviceInfoId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
    title: "VisitDtoReq"
    example:
      date:
        date: 0
        hours: 6
        seconds: 2
        month: 5
        nanos: 5
        year: 9
        minutes: 1
        time: 7
      serviceInfoId: 2
      comment: "comment"
      id: 3
      userId: 4
  VisitDtoRes:
    type: "object"
    properties:
      comment:
        type: "string"
      date:
        $ref: "#/definitions/TimestampRes"
      id:
        type: "integer"
        format: "int64"
      serviceInfoId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
    title: "VisitDtoRes"
